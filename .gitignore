# Creado por https://www.toptal.com/developers/gitignore/api/django
# Editar en https://www.toptal.com/developers/gitignore?templates=django

### Django ###
*.registro
*.olla
*.pyc
__pycache__/
configuración_local.py
db.sqlite3
db.sqlite3-journal
medios de comunicación

# Si su proceso de compilación incluye ejecutar collectstatic, entonces probablemente no necesite ni desee incluir staticfiles/
# en tu repositorio de Git. Actualiza y descomenta la siguiente línea según corresponda.
# <nombre-del-proyecto-django>/archivos-estáticos/

### Pila de Django.Python ###
# Archivos DLL compilados en bytes/optimizados
*.py[cod]
*$py.class

# Extensiones de C
*.entonces

# Distribución / embalaje
.Pitón
construir/
huevos en desarrollo/
dist/
descargas/
huevos/
.huevos/
lib/
lib64/
regiones/
sdist/
var/
ruedas/
compartir/python-wheels/
*.egg-info/
.instalado.cfg
*.huevo
MANIFIESTO

# PyInstaller
# Generalmente estos archivos se escriben mediante un script de Python a partir de una plantilla
# antes de que PyInstaller construya el exe, para poder inyectarle fecha y otra información.
*.manifiesto
*.especulación

# Registros del instalador
pip-log.txt
pip-eliminar-este-directorio.txt

# Informes de pruebas unitarias/cobertura
htmlcov/
.tox/
.nox/
.cobertura
.cobertura.*
.cache
pruebas de nariz.xml
cobertura.xml
*.cubrir
*.py,portada
.hipótesis/
.pytest_cache/
cubrir/

# Traducciones
*.mes

# Cosas de Django:

# Cosas del matraz:
instancia/
.webassets-cache

# Cosas raras:
.desordenado

# Documentación de Sphinx
docs/_build/

# PyBuilder
.pybuilder/
objetivo/

# Cuaderno Jupyter
.ipynb_puntos de control

#IPython
perfil_predeterminado/
ipython_config.py

# pyenv
# Para una biblioteca o un paquete, es posible que desees ignorar estos archivos ya que el código es
# destinados a ejecutarse en múltiples entornos; de lo contrario, regístrelos en:
# .python-version

# pipenv
# Según pypa/pipenv#598, se recomienda incluir Pipfile.lock en el control de versiones.
# Sin embargo, en caso de colaboración, si tiene dependencias o dependencias específicas de la plataforma
# al no tener soporte multiplataforma, pipenv puede instalar dependencias que no funcionan o no
#Instala todas las dependencias necesarias.
#Pipfile.lock

# poesía
# Similar a Pipfile.lock, generalmente se recomienda incluir poetry.lock en el control de versiones.
# Esto se recomienda especialmente para paquetes binarios para garantizar la reproducibilidad y es más
# comúnmente ignorado por las bibliotecas.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poesía.bloqueo

#pdm
# Similar a Pipfile.lock, generalmente se recomienda incluir pdm.lock en el control de versiones.
#pdm.lock
# pdm almacena configuraciones de todo el proyecto en .pdm.toml, pero se recomienda no incluirlo
# en el control de versiones.
# https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; utilizado por ejemplo en github.com/David-OConnor/pyflow y github.com/pdm-project/pdm
__pypackages__/

# Cosas de apio
horario de celerybeat
celerybeat.pid

# Archivos analizados por SageMath
*.sage.py

# Entornos
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Configuración del proyecto Spyder
.proyecto spyder
.proyecto espía

# Configuración del proyecto de cuerda
.ropeproject

# Documentación de mkdocs
/sitio

#mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Comprobador de tipo Pyre
.pira/

# analizador de tipos estáticos pytype
.pytype/

# Símbolos de depuración de Cython
depuración de cython/

# PyCharm
# La plantilla específica de JetBrains se mantiene en un JetBrains.gitignore separado que puede
# se puede encontrar en https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
# y se puede agregar al gitignore global o fusionarlo en este archivo. Para una explicación más detallada
# Opción (no recomendada) puedes descomentar lo siguiente para ignorar toda la carpeta de ideas.
#.idea/

# Fin de https://www.toptal.com/developers/gitignore/api/django